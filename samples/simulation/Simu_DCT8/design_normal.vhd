-- This design_normal file has been generated by the GraphLab tool
-- using the hls_GeneratedMooreArchitecture developped by Bertrand LE GAL
-- and Willy AUBRY for High-Level Synthesis design flow.
-- * Time and Date   : 16:33 27/05/2011
-- * Module name     : 
-- * Module version  : 0
-- * Module command  : 
-- * Author name     : 
-- * E-Mail          : 
-- * Company         : 
-- * Copyright       : 
-- * Design function : 
--
--
--  Correspondence concerning GraphLab software and its modules
--  should be addressed as follows:
--         Bertrand LE GAL (bertrand.legal@ims-bordeaux.fr)
--         Maitre de Conferences - ENSEIRB
--         Laboratoire IMS - ENSEIRB - UMR 5818
--         Universite de Bordeaux 1
--         351, cours de la Liberation
--         F-33405 TALENCE Cedex
--         FRANCE
--
--  Or directly using its website :
--         http://uuu.enseirb.fr/~legal/wp_graphlab



LIBRARY IEEE; 
USE IEEE.STD_LOGIC_1164.ALL; 
USE IEEE.NUMERIC_STD.ALL; 
--USE IEEE.STD_LOGIC_SIGNED.ALL; 
--USE IEEE.STD_LOGIC_ARITH.ALL; 
 
library work; 
use work.all; 
 
ENTITY design_normal IS 
  PORT ( 
    INPUT_1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    INPUT_8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    OUTPUT_8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0); 
    clock  : IN  STD_LOGIC;
    start  : IN  STD_LOGIC;
    reset  : IN  STD_LOGIC
  ); 
END design_normal; 
 
ARCHITECTURE design_normal_arch OF design_normal IS 
COMPONENT MUL_DYNAMIC
  GENERIC(
      C_SIGNED        : NATURAL := 0;
      INPUT_1_WIDTH   : POSITIVE := 16;
      INPUT_2_WIDTH   : POSITIVE := 16;
      OUTPUT_1_WIDTH  : POSITIVE := 16
  );
  PORT( 
       INPUT_1  : IN  STD_LOGIC_VECTOR(INPUT_1_WIDTH -1 DOWNTO 0);
       INPUT_2  : IN  STD_LOGIC_VECTOR(INPUT_2_WIDTH -1 DOWNTO 0);
       OUTPUT_1 : OUT STD_LOGIC_VECTOR(OUTPUT_1_WIDTH-1 DOWNTO 0)
      );
END COMPONENT;
 
COMPONENT ADD_DYNAMIC
  GENERIC(
      C_SIGNED        : NATURAL := 0;
      INPUT_1_WIDTH   : POSITIVE := 16;
      INPUT_2_WIDTH   : POSITIVE := 16;
      OUTPUT_1_WIDTH  : POSITIVE := 16
  );
  PORT( 
       INPUT_1  : IN  STD_LOGIC_VECTOR(INPUT_1_WIDTH -1 DOWNTO 0);
       INPUT_2  : IN  STD_LOGIC_VECTOR(INPUT_2_WIDTH -1 DOWNTO 0);
       OUTPUT_1 : OUT STD_LOGIC_VECTOR(OUTPUT_1_WIDTH-1 DOWNTO 0)
      );
END COMPONENT;
 
COMPONENT SUB_DYNAMIC
  GENERIC(
      C_SIGNED        : NATURAL := 0;
      INPUT_1_WIDTH   : POSITIVE := 16;
      INPUT_2_WIDTH   : POSITIVE := 16;
      OUTPUT_1_WIDTH  : POSITIVE := 16
  );
  PORT( 
       INPUT_1  : IN  STD_LOGIC_VECTOR(INPUT_1_WIDTH -1 DOWNTO 0);
       INPUT_2  : IN  STD_LOGIC_VECTOR(INPUT_2_WIDTH -1 DOWNTO 0);
       OUTPUT_1 : OUT STD_LOGIC_VECTOR(OUTPUT_1_WIDTH-1 DOWNTO 0)
      );
END COMPONENT;
 

   TYPE StateType IS (E0, E1, E2, E3, E4, E5, E6, E7, E8);
   SIGNAL CurrentState_GLOBAL : StateType;

   --
   -- DEFINITION DES REGISTRES 
   --
   SIGNAL OPR_ADD_1_INPUT_1_REGISTER_0001 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_1_INPUT_2_REGISTER_0002 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_1_REGISTER_0003 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_2_REGISTER_0004 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_1_REGISTER_0005 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_2_REGISTER_0006 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_1_REGISTER_0007 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_1_REGISTER_0047 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_2_REGISTER_0008 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0018 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0031 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0044 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0050 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0020 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0033 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0040 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0053 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0022 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0038 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0048 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0024 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0042 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0051 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0026 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0035 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0039 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0049 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0028 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0037 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0046 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0052 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_1_REGISTER_0009 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_1_REGISTER_0054 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_2_REGISTER_0010 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_1_REGISTER_0011 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0012 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0055 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0056 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_1_REGISTER_0013 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_2_REGISTER_0014 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_1_REGISTER_0015 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_2_REGISTER_0016 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_1_REGISTER_0057 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_2_REGISTER_0061 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_3_REGISTER_0058 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_4_REGISTER_0062 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_5_REGISTER_0059 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_6_REGISTER_0063 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_7_REGISTER_0060 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_8_REGISTER_0064 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
 

   --
   -- DEFINITION DES ENTREES DES REGISTRES (UTILISE POUR LES MULTIPLEXEURS)
   --
   SIGNAL OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_1_REGISTER_0057_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_2_REGISTER_0061_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_3_REGISTER_0058_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_4_REGISTER_0062_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_5_REGISTER_0059_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_6_REGISTER_0063_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_7_REGISTER_0060_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OUTPUT_8_REGISTER_0064_INPUT : STD_LOGIC_VECTOR(31 DOWNTO 0); 
 
   SIGNAL OPR_ADD_1_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_1_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_1_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_2_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_3_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_ADD_4_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_1_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_2_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_3_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_4_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_5_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_MUL_6_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_1_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_2_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_3_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_INPUT_2 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
   SIGNAL OPR_SUB_4_OUTPUT_1 : STD_LOGIC_VECTOR(31 DOWNTO 0); 
 
BEGIN 
 
   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_1_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_ADD_1_INPUT_1_REGISTER_0001)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_1_INPUT_1 <= OPR_ADD_1_INPUT_1_REGISTER_0001;  -- (+ / 355 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_ADD_1_INPUT_1 <= OPR_ADD_1_INPUT_1_REGISTER_0001;  -- (+ / 363 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_1_INPUT_1 <= OPR_ADD_1_INPUT_1_REGISTER_0001;  -- (+ / 399 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_1_INPUT_1 <= OPR_ADD_1_INPUT_1_REGISTER_0001;  -- (+ / 624 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_ADD_1_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_1_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_1_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_ADD_1_INPUT_2_REGISTER_0002)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_1_INPUT_2 <= OPR_ADD_1_INPUT_2_REGISTER_0002;  -- (+ / 355 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_ADD_1_INPUT_2 <= OPR_ADD_1_INPUT_2_REGISTER_0002;  -- (+ / 363 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_1_INPUT_2 <= OPR_ADD_1_INPUT_2_REGISTER_0002;  -- (+ / 399 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_1_INPUT_2 <= OPR_ADD_1_INPUT_2_REGISTER_0002;  -- (+ / 624 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_ADD_1_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_1_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_2_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_ADD_2_INPUT_1_REGISTER_0003)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_2_INPUT_1 <= OPR_ADD_2_INPUT_1_REGISTER_0003;  -- (+ / 361 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_2_INPUT_1 <= OPR_ADD_2_INPUT_1_REGISTER_0003;  -- (+ / 371 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_2_INPUT_1 <= OPR_ADD_2_INPUT_1_REGISTER_0003;  -- (+ / 516 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_2_INPUT_1 <= OPR_ADD_2_INPUT_1_REGISTER_0003;  -- (+ / 453 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_2_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_2_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_2_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_ADD_2_INPUT_2_REGISTER_0004)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_2_INPUT_2 <= OPR_ADD_2_INPUT_2_REGISTER_0004;  -- (+ / 361 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_2_INPUT_2 <= OPR_ADD_2_INPUT_2_REGISTER_0004;  -- (+ / 371 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_2_INPUT_2 <= OPR_ADD_2_INPUT_2_REGISTER_0004;  -- (+ / 516 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_2_INPUT_2 <= OPR_ADD_2_INPUT_2_REGISTER_0004;  -- (+ / 453 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_2_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_2_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_3_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_ADD_3_INPUT_1_REGISTER_0005)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_3_INPUT_1 <= OPR_ADD_3_INPUT_1_REGISTER_0005;  -- (+ / 369 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_3_INPUT_1 <= OPR_ADD_3_INPUT_1_REGISTER_0005;  -- (+ / 507 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_3_INPUT_1 <= OPR_ADD_3_INPUT_1_REGISTER_0005;  -- (+ / 480 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_3_INPUT_1 <= OPR_ADD_3_INPUT_1_REGISTER_0005;  -- (+ / 597 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_3_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_3_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_3_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_ADD_3_INPUT_2_REGISTER_0006)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_3_INPUT_2 <= OPR_ADD_3_INPUT_2_REGISTER_0006;  -- (+ / 369 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_ADD_3_INPUT_2 <= OPR_ADD_3_INPUT_2_REGISTER_0006;  -- (+ / 507 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_3_INPUT_2 <= OPR_ADD_3_INPUT_2_REGISTER_0006;  -- (+ / 480 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_3_INPUT_2 <= OPR_ADD_3_INPUT_2_REGISTER_0006;  -- (+ / 597 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_3_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_3_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_4_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_ADD_4_INPUT_1_REGISTER_0007, OPR_ADD_4_INPUT_1_REGISTER_0047)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_4_INPUT_1 <= OPR_ADD_4_INPUT_1_REGISTER_0007;  -- (+ / 377 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_ADD_4_INPUT_1 <= OPR_ADD_4_INPUT_1_REGISTER_0007;  -- (+ / 379 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_4_INPUT_1 <= OPR_ADD_4_INPUT_1_REGISTER_0047;  -- (+ / 588 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_4_INPUT_1 <= OPR_ADD_4_INPUT_1_REGISTER_0007;  -- (+ / 525 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_4_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_4_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_ADD_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_ADD_4_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_ADD_4_INPUT_2_REGISTER_0008)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_ADD_4_INPUT_2 <= OPR_ADD_4_INPUT_2_REGISTER_0008;  -- (+ / 377 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_ADD_4_INPUT_2 <= OPR_ADD_4_INPUT_2_REGISTER_0008;  -- (+ / 379 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_ADD_4_INPUT_2 <= OPR_ADD_4_INPUT_2_REGISTER_0008;  -- (+ / 588 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_ADD_4_INPUT_2 <= OPR_ADD_4_INPUT_2_REGISTER_0008;  -- (+ / 525 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_ADD_4_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_ADD_4_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_1_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_1_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(3, 32) );  -- (* / 505 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_1_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(3, 32) );  -- (* / 534 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_1_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(2, 32) );  -- (* / 478 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_1_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(3, 32) );  -- (* / 595 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_1_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_1_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_1_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_1_INPUT_2_REGISTER_0018, OPR_MUL_1_INPUT_2_REGISTER_0031, OPR_MUL_1_INPUT_2_REGISTER_0044, OPR_MUL_1_INPUT_2_REGISTER_0050)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_1_INPUT_2 <= OPR_MUL_1_INPUT_2_REGISTER_0018;  -- (* / 505 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_1_INPUT_2 <= OPR_MUL_1_INPUT_2_REGISTER_0031;  -- (* / 534 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_1_INPUT_2 <= OPR_MUL_1_INPUT_2_REGISTER_0044;  -- (* / 478 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_1_INPUT_2 <= OPR_MUL_1_INPUT_2_REGISTER_0050;  -- (* / 595 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_1_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_1_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_2_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_2_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(5, 32) );  -- (* / 570 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_2_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(7, 32) );  -- (* / 541 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_2_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(5, 32) );  -- (* / 514 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_2_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(5, 32) );  -- (* / 559 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_2_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_2_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_2_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_2_INPUT_2_REGISTER_0020, OPR_MUL_2_INPUT_2_REGISTER_0033, OPR_MUL_2_INPUT_2_REGISTER_0040, OPR_MUL_2_INPUT_2_REGISTER_0053)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_2_INPUT_2 <= OPR_MUL_2_INPUT_2_REGISTER_0020;  -- (* / 570 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_2_INPUT_2 <= OPR_MUL_2_INPUT_2_REGISTER_0033;  -- (* / 541 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_2_INPUT_2 <= OPR_MUL_2_INPUT_2_REGISTER_0040;  -- (* / 514 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_2_INPUT_2 <= OPR_MUL_2_INPUT_2_REGISTER_0053;  -- (* / 559 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_2_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_2_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_3_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_3_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(2, 32) );  -- (* / 390 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_3_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(6, 32) );  -- (* / 462 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_3_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(6, 32) );  -- (* / 406 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_3_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(6, 32) );  -- (* / 487 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_3_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_3_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_3_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_3_INPUT_2_REGISTER_0022, OPR_MUL_3_INPUT_2_REGISTER_0038, OPR_MUL_3_INPUT_2_REGISTER_0048)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_3_INPUT_2 <= OPR_MUL_3_INPUT_2_REGISTER_0022;  -- (* / 390 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_3_INPUT_2 <= OPR_MUL_3_INPUT_2_REGISTER_0022;  -- (* / 462 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_3_INPUT_2 <= OPR_MUL_3_INPUT_2_REGISTER_0038;  -- (* / 406 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_3_INPUT_2 <= OPR_MUL_3_INPUT_2_REGISTER_0048;  -- (* / 487 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_3_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_3_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_4_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_4_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(6, 32) );  -- (* / 397 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_4_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(2, 32) );  -- (* / 469 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_4_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(7, 32) );  -- (* / 586 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_4_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(2, 32) );  -- (* / 415 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_4_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_4_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_4_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_4_INPUT_2_REGISTER_0024, OPR_MUL_4_INPUT_2_REGISTER_0042, OPR_MUL_4_INPUT_2_REGISTER_0051)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_4_INPUT_2 <= OPR_MUL_4_INPUT_2_REGISTER_0024;  -- (* / 397 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_4_INPUT_2 <= OPR_MUL_4_INPUT_2_REGISTER_0024;  -- (* / 469 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_4_INPUT_2 <= OPR_MUL_4_INPUT_2_REGISTER_0042;  -- (* / 586 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_4_INPUT_2 <= OPR_MUL_4_INPUT_2_REGISTER_0051;  -- (* / 415 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_4_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_4_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_5
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_5_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_5_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(4, 32) );  -- (* / 426 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_5_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(7, 32) );  -- (* / 606 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_5_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(4, 32) );  -- (* / 442 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_5_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(7, 32) );  -- (* / 523 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_MUL_5_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(4, 32) );  -- (* / 381 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_MUL_5_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_5_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_5
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_5_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_5_INPUT_2_REGISTER_0026, OPR_MUL_5_INPUT_2_REGISTER_0035, OPR_MUL_5_INPUT_2_REGISTER_0039, OPR_MUL_5_INPUT_2_REGISTER_0049)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_5_INPUT_2 <= OPR_MUL_5_INPUT_2_REGISTER_0026;  -- (* / 426 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_5_INPUT_2 <= OPR_MUL_5_INPUT_2_REGISTER_0035;  -- (* / 606 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_5_INPUT_2 <= OPR_MUL_5_INPUT_2_REGISTER_0039;  -- (* / 442 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_5_INPUT_2 <= OPR_MUL_5_INPUT_2_REGISTER_0049;  -- (* / 523 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_MUL_5_INPUT_2 <= OPR_MUL_5_INPUT_2_REGISTER_0039;  -- (* / 381 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_MUL_5_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_5_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_6
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_6_INPUT_1 : PROCESS (CurrentState_GLOBAL)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_6_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(4, 32) );  -- (* / 433 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_6_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(5, 32) );  -- (* / 613 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_6_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(3, 32) );  -- (* / 622 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_6_INPUT_1 <= STD_LOGIC_VECTOR( TO_SIGNED(4, 32) );  -- (* / 451 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_6_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_6_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_MUL_6
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E1/E5=>6 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_MUL_6_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_MUL_6_INPUT_2_REGISTER_0028, OPR_MUL_6_INPUT_2_REGISTER_0037, OPR_MUL_6_INPUT_2_REGISTER_0046, OPR_MUL_6_INPUT_2_REGISTER_0052)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=2 OFFSET=0 => 2
      WHEN E2     => OPR_MUL_6_INPUT_2 <= OPR_MUL_6_INPUT_2_REGISTER_0028;  -- (* / 433 / mode = 1 / cycle = 2)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_MUL_6_INPUT_2 <= OPR_MUL_6_INPUT_2_REGISTER_0037;  -- (* / 613 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_MUL_6_INPUT_2 <= OPR_MUL_6_INPUT_2_REGISTER_0046;  -- (* / 622 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_MUL_6_INPUT_2 <= OPR_MUL_6_INPUT_2_REGISTER_0052;  -- (* / 451 / mode = 1 / cycle = 5)
      WHEN OTHERS => OPR_MUL_6_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_MUL_6_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_1_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_SUB_1_INPUT_1_REGISTER_0009, OPR_SUB_1_INPUT_1_REGISTER_0054)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_1_INPUT_1 <= OPR_SUB_1_INPUT_1_REGISTER_0009;  -- (- / 496 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_SUB_1_INPUT_1 <= OPR_SUB_1_INPUT_1_REGISTER_0009;  -- (- / 435 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_1_INPUT_1 <= OPR_SUB_1_INPUT_1_REGISTER_0009;  -- (- / 471 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_1_INPUT_1 <= OPR_SUB_1_INPUT_1_REGISTER_0054;  -- (- / 444 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_1_INPUT_1 <= OPR_SUB_1_INPUT_1_REGISTER_0009;  -- (- / 417 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_1_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_1_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_1
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_1_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_SUB_1_INPUT_2_REGISTER_0010)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_1_INPUT_2 <= OPR_SUB_1_INPUT_2_REGISTER_0010;  -- (- / 496 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_SUB_1_INPUT_2 <= OPR_SUB_1_INPUT_2_REGISTER_0010;  -- (- / 435 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_1_INPUT_2 <= OPR_SUB_1_INPUT_2_REGISTER_0010;  -- (- / 471 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_1_INPUT_2 <= OPR_SUB_1_INPUT_2_REGISTER_0010;  -- (- / 444 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_1_INPUT_2 <= OPR_SUB_1_INPUT_2_REGISTER_0010;  -- (- / 417 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_1_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_1_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_2_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_SUB_2_INPUT_1_REGISTER_0011)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_2_INPUT_1 <= OPR_SUB_2_INPUT_1_REGISTER_0011;  -- (- / 503 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_SUB_2_INPUT_1 <= OPR_SUB_2_INPUT_1_REGISTER_0011;  -- (- / 579 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_2_INPUT_1 <= OPR_SUB_2_INPUT_1_REGISTER_0011;  -- (- / 615 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_2_INPUT_1 <= OPR_SUB_2_INPUT_1_REGISTER_0011;  -- (- / 552 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_2_INPUT_1 <= OPR_SUB_2_INPUT_1_REGISTER_0011;  -- (- / 633 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_2_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_2_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_2
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_2_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_SUB_2_INPUT_2_REGISTER_0012, OPR_SUB_2_INPUT_2_REGISTER_0055, OPR_SUB_2_INPUT_2_REGISTER_0056)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_2_INPUT_2 <= OPR_SUB_2_INPUT_2_REGISTER_0012;  -- (- / 503 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=3 OFFSET=0 => 3
      WHEN E3     => OPR_SUB_2_INPUT_2 <= OPR_SUB_2_INPUT_2_REGISTER_0012;  -- (- / 579 / mode = 1 / cycle = 3)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_2_INPUT_2 <= OPR_SUB_2_INPUT_2_REGISTER_0012;  -- (- / 615 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_2_INPUT_2 <= OPR_SUB_2_INPUT_2_REGISTER_0055;  -- (- / 552 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_2_INPUT_2 <= OPR_SUB_2_INPUT_2_REGISTER_0056;  -- (- / 633 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_2_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_2_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_3_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_SUB_3_INPUT_1_REGISTER_0013)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_3_INPUT_1 <= OPR_SUB_3_INPUT_1_REGISTER_0013;  -- (- / 512 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_3_INPUT_1 <= OPR_SUB_3_INPUT_1_REGISTER_0013;  -- (- / 543 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_3_INPUT_1 <= OPR_SUB_3_INPUT_1_REGISTER_0013;  -- (- / 561 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_3_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_3_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_3
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_3_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_SUB_3_INPUT_2_REGISTER_0014)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_3_INPUT_2 <= OPR_SUB_3_INPUT_2_REGISTER_0014;  -- (- / 512 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=4 OFFSET=0 => 4
      WHEN E4     => OPR_SUB_3_INPUT_2 <= OPR_SUB_3_INPUT_2_REGISTER_0014;  -- (- / 543 / mode = 1 / cycle = 4)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_3_INPUT_2 <= OPR_SUB_3_INPUT_2_REGISTER_0014;  -- (- / 561 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_3_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_3_INPUT_2;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_4_INPUT_1 : PROCESS (CurrentState_GLOBAL, OPR_SUB_4_INPUT_1_REGISTER_0015)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_4_INPUT_1 <= OPR_SUB_4_INPUT_1_REGISTER_0015;  -- (- / 521 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_4_INPUT_1 <= OPR_SUB_4_INPUT_1_REGISTER_0015;  -- (- / 408 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_4_INPUT_1 <= OPR_SUB_4_INPUT_1_REGISTER_0015;  -- (- / 489 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_4_INPUT_1 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_4_INPUT_1;


   ---------------------------------------------------------  
   --  Cluster name : OPR_SUB_4
   --  * The cluster contains 1 possible execution paths
   --    => The mode 1 required computation(s) : True (E0/E8=>9 states)
   --  
   ---------------------------------------------------------  
   PROC_ASYNC_OPR_SUB_4_INPUT_2 : PROCESS (CurrentState_GLOBAL, OPR_SUB_4_INPUT_2_REGISTER_0016)
   BEGIN
     CASE CurrentState_GLOBAL IS
      -- MODE=1 CYCLE=1 OFFSET=0 => 1
      WHEN E1     => OPR_SUB_4_INPUT_2 <= OPR_SUB_4_INPUT_2_REGISTER_0016;  -- (- / 521 / mode = 1 / cycle = 1)
      -- MODE=1 CYCLE=5 OFFSET=0 => 5
      WHEN E5     => OPR_SUB_4_INPUT_2 <= OPR_SUB_4_INPUT_2_REGISTER_0016;  -- (- / 408 / mode = 1 / cycle = 5)
      -- MODE=1 CYCLE=6 OFFSET=0 => 6
      WHEN E6     => OPR_SUB_4_INPUT_2 <= OPR_SUB_4_INPUT_2_REGISTER_0016;  -- (- / 489 / mode = 1 / cycle = 6)
      WHEN OTHERS => OPR_SUB_4_INPUT_2 <= (OTHERS=>'X');
     END CASE;
   END PROCESS PROC_ASYNC_OPR_SUB_4_INPUT_2;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_1_INPUT_1_REGISTER_0001
   --
   PROC_REGISTER_CONTROL_OPR_ADD_1_INPUT_1_REGISTER_0001 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT; -- mode (1) :: Affectation d'une valeur (X(1))
        WHEN E1   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT; -- mode (1) :: Affectation d'une valeur (temp0)
        WHEN E2   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT; -- mode (1) :: Affectation d'une valeur (temp9)
        WHEN E3   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001; -- datapath activity freeze
        WHEN E4   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT; -- mode (1) :: Affectation d'une valeur (temp78)
        WHEN E5   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001; -- datapath activity freeze
        WHEN E6   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001; -- datapath activity freeze
        WHEN E7   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001; -- datapath activity freeze
        WHEN E8   => OPR_ADD_1_INPUT_1_REGISTER_0001 <= OPR_ADD_1_INPUT_1_REGISTER_0001; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_1_INPUT_1_REGISTER_0001 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_1_INPUT_1_REGISTER_0001;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_1_INPUT_2_REGISTER_0002
   --
   PROC_REGISTER_CONTROL_OPR_ADD_1_INPUT_2_REGISTER_0002 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT; -- mode (1) :: Affectation d'une valeur (X(8))
        WHEN E1   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT; -- mode (1) :: Affectation d'une valeur (temp1)
        WHEN E2   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT; -- mode (1) :: Affectation d'une valeur (temp11)
        WHEN E3   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002; -- datapath activity freeze
        WHEN E4   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT; -- mode (1) :: Affectation d'une valeur (temp80)
        WHEN E5   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002; -- datapath activity freeze
        WHEN E6   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002; -- datapath activity freeze
        WHEN E7   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002; -- datapath activity freeze
        WHEN E8   => OPR_ADD_1_INPUT_2_REGISTER_0002 <= OPR_ADD_1_INPUT_2_REGISTER_0002; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_1_INPUT_2_REGISTER_0002 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_1_INPUT_2_REGISTER_0002;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_2_INPUT_1_REGISTER_0003
   --
   PROC_REGISTER_CONTROL_OPR_ADD_2_INPUT_1_REGISTER_0003 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT; -- mode (1) :: Affectation d'une valeur (X(2))
        WHEN E1   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003; -- datapath activity freeze
        WHEN E2   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT; -- mode (1) :: Affectation d'une valeur (temp2)
        WHEN E3   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT; -- mode (1) :: Affectation d'une valeur (temp45)
        WHEN E4   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003; -- mode (1) :: Maintient d'une valeur (temp45)
        WHEN E5   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT; -- mode (1) :: Affectation d'une valeur (temp26)
        WHEN E6   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003; -- datapath activity freeze
        WHEN E7   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003; -- datapath activity freeze
        WHEN E8   => OPR_ADD_2_INPUT_1_REGISTER_0003 <= OPR_ADD_2_INPUT_1_REGISTER_0003; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_2_INPUT_1_REGISTER_0003 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_2_INPUT_1_REGISTER_0003;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_2_INPUT_2_REGISTER_0004
   --
   PROC_REGISTER_CONTROL_OPR_ADD_2_INPUT_2_REGISTER_0004 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT; -- mode (1) :: Affectation d'une valeur (X(7))
        WHEN E1   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT; -- mode (1) :: Affectation d'une valeur (temp3)
        WHEN E2   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E3   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004; -- datapath activity freeze
        WHEN E4   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT; -- mode (1) :: Affectation d'une valeur (temp47)
        WHEN E5   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT; -- mode (1) :: Affectation d'une valeur (temp28)
        WHEN E6   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004; -- datapath activity freeze
        WHEN E7   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004; -- datapath activity freeze
        WHEN E8   => OPR_ADD_2_INPUT_2_REGISTER_0004 <= OPR_ADD_2_INPUT_2_REGISTER_0004; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_2_INPUT_2_REGISTER_0004 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_2_INPUT_2_REGISTER_0004;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_3_INPUT_1_REGISTER_0005
   --
   PROC_REGISTER_CONTROL_OPR_ADD_3_INPUT_1_REGISTER_0005 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT; -- mode (1) :: Affectation d'une valeur (X(3))
        WHEN E1   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT; -- mode (1) :: Affectation d'une valeur (temp41)
        WHEN E2   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005; -- mode (1) :: Maintient d'une valeur (temp41)
        WHEN E3   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005; -- datapath activity freeze
        WHEN E4   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT; -- mode (1) :: Affectation d'une valeur (temp34)
        WHEN E5   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT; -- mode (1) :: Affectation d'une valeur (temp70)
        WHEN E6   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005; -- datapath activity freeze
        WHEN E7   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005; -- datapath activity freeze
        WHEN E8   => OPR_ADD_3_INPUT_1_REGISTER_0005 <= OPR_ADD_3_INPUT_1_REGISTER_0005; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_3_INPUT_1_REGISTER_0005 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_3_INPUT_1_REGISTER_0005;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_3_INPUT_2_REGISTER_0006
   --
   PROC_REGISTER_CONTROL_OPR_ADD_3_INPUT_2_REGISTER_0006 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT; -- mode (1) :: Affectation d'une valeur (X(6))
        WHEN E1   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006; -- datapath activity freeze
        WHEN E2   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT; -- mode (1) :: Affectation d'une valeur (temp44)
        WHEN E3   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006; -- datapath activity freeze
        WHEN E4   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT; -- mode (1) :: Affectation d'une valeur (temp36)
        WHEN E5   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT; -- mode (1) :: Affectation d'une valeur (temp72)
        WHEN E6   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006; -- datapath activity freeze
        WHEN E7   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006; -- datapath activity freeze
        WHEN E8   => OPR_ADD_3_INPUT_2_REGISTER_0006 <= OPR_ADD_3_INPUT_2_REGISTER_0006; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_3_INPUT_2_REGISTER_0006 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_3_INPUT_2_REGISTER_0006;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_4_INPUT_1_REGISTER_0007
   --
   PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_1_REGISTER_0007 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT; -- mode (1) :: Affectation d'une valeur (X(4))
        WHEN E1   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN E2   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN E3   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT; -- mode (1) :: Affectation d'une valeur (temp4)
        WHEN E4   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN E5   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT; -- mode (1) :: Affectation d'une valeur (temp48)
        WHEN E6   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN E7   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN E8   => OPR_ADD_4_INPUT_1_REGISTER_0007 <= OPR_ADD_4_INPUT_1_REGISTER_0007; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_4_INPUT_1_REGISTER_0007 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_1_REGISTER_0007;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_4_INPUT_1_REGISTER_0047
   --
   PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_1_REGISTER_0047 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E1   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E2   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E3   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT; -- mode (1) :: Affectation d'une valeur (temp67)
        WHEN E4   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- mode (1) :: Maintient d'une valeur (temp67)
        WHEN E5   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E6   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E7   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN E8   => OPR_ADD_4_INPUT_1_REGISTER_0047 <= OPR_ADD_4_INPUT_1_REGISTER_0047; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_4_INPUT_1_REGISTER_0047 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_1_REGISTER_0047;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_ADD_4_INPUT_2_REGISTER_0008
   --
   PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_2_REGISTER_0008 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT; -- mode (1) :: Affectation d'une valeur (X(5))
        WHEN E1   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT; -- mode (1) :: Affectation d'une valeur (temp5)
        WHEN E2   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E3   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E4   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT; -- mode (1) :: Affectation d'une valeur (temp69)
        WHEN E5   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT; -- mode (1) :: Affectation d'une valeur (temp50)
        WHEN E6   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008; -- datapath activity freeze
        WHEN E7   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008; -- datapath activity freeze
        WHEN E8   => OPR_ADD_4_INPUT_2_REGISTER_0008 <= OPR_ADD_4_INPUT_2_REGISTER_0008; -- datapath activity freeze
        WHEN OTHERS => OPR_ADD_4_INPUT_2_REGISTER_0008 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_ADD_4_INPUT_2_REGISTER_0008;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0018
   --
   PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0018 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E1   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT; -- mode (1) :: Affectation d'une valeur (temp43)
        WHEN E2   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E3   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E4   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E5   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E6   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E7   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN E8   => OPR_MUL_1_INPUT_2_REGISTER_0018 <= OPR_MUL_1_INPUT_2_REGISTER_0018; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_1_INPUT_2_REGISTER_0018 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0018;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0031
   --
   PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0031 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E1   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT; -- mode (1) :: Affectation d'une valeur (temp41)
        WHEN E2   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- mode (1) :: Maintient d'une valeur (temp41)
        WHEN E3   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E4   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E5   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E6   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E7   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN E8   => OPR_MUL_1_INPUT_2_REGISTER_0031 <= OPR_MUL_1_INPUT_2_REGISTER_0031; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_1_INPUT_2_REGISTER_0031 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0031;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0044
   --
   PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0044 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN E1   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT; -- mode (1) :: Affectation d'une valeur (temp3)
        WHEN E2   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E3   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E4   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN E5   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN E6   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN E7   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN E8   => OPR_MUL_1_INPUT_2_REGISTER_0044 <= OPR_MUL_1_INPUT_2_REGISTER_0044; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_1_INPUT_2_REGISTER_0044 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0044;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0050
   --
   PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0050 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- datapath activity freeze
        WHEN E1   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT; -- mode (1) :: Affectation d'une valeur (temp49)
        WHEN E2   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E3   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E4   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E5   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- datapath activity freeze
        WHEN E6   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- datapath activity freeze
        WHEN E7   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- datapath activity freeze
        WHEN E8   => OPR_MUL_1_INPUT_2_REGISTER_0050 <= OPR_MUL_1_INPUT_2_REGISTER_0050; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_1_INPUT_2_REGISTER_0050 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_1_INPUT_2_REGISTER_0050;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0020
   --
   PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0020 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E1   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT; -- mode (1) :: Affectation d'une valeur (temp41)
        WHEN E2   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E3   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E4   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E5   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E6   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E7   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN E8   => OPR_MUL_2_INPUT_2_REGISTER_0020 <= OPR_MUL_2_INPUT_2_REGISTER_0020; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_2_INPUT_2_REGISTER_0020 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0020;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0033
   --
   PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0033 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E1   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT; -- mode (1) :: Affectation d'une valeur (temp43)
        WHEN E2   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- mode (1) :: Maintient d'une valeur (temp43)
        WHEN E3   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E4   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E5   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E6   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E7   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN E8   => OPR_MUL_2_INPUT_2_REGISTER_0033 <= OPR_MUL_2_INPUT_2_REGISTER_0033; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_2_INPUT_2_REGISTER_0033 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0033;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0040
   --
   PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0040 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN E1   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT; -- mode (1) :: Affectation d'une valeur (temp46)
        WHEN E2   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E3   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E4   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN E5   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN E6   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN E7   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN E8   => OPR_MUL_2_INPUT_2_REGISTER_0040 <= OPR_MUL_2_INPUT_2_REGISTER_0040; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_2_INPUT_2_REGISTER_0040 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0040;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0053
   --
   PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0053 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- datapath activity freeze
        WHEN E1   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT; -- mode (1) :: Affectation d'une valeur (temp49)
        WHEN E2   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E3   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E4   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E5   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- datapath activity freeze
        WHEN E6   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- datapath activity freeze
        WHEN E7   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- datapath activity freeze
        WHEN E8   => OPR_MUL_2_INPUT_2_REGISTER_0053 <= OPR_MUL_2_INPUT_2_REGISTER_0053; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_2_INPUT_2_REGISTER_0053 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_2_INPUT_2_REGISTER_0053;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0022
   --
   PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0022 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E1   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT; -- mode (1) :: Affectation d'une valeur (temp0)
        WHEN E2   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- mode (1) :: Maintient d'une valeur (temp0)
        WHEN E3   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E4   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E5   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E6   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E7   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN E8   => OPR_MUL_3_INPUT_2_REGISTER_0022 <= OPR_MUL_3_INPUT_2_REGISTER_0022; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_3_INPUT_2_REGISTER_0022 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0022;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0038
   --
   PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0038 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN E1   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT; -- mode (1) :: Affectation d'une valeur (temp3)
        WHEN E2   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E3   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E4   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN E5   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN E6   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN E7   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN E8   => OPR_MUL_3_INPUT_2_REGISTER_0038 <= OPR_MUL_3_INPUT_2_REGISTER_0038; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_3_INPUT_2_REGISTER_0038 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0038;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0048
   --
   PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0048 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- datapath activity freeze
        WHEN E1   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT; -- mode (1) :: Affectation d'une valeur (temp5)
        WHEN E2   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E3   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E4   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E5   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- datapath activity freeze
        WHEN E6   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- datapath activity freeze
        WHEN E7   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- datapath activity freeze
        WHEN E8   => OPR_MUL_3_INPUT_2_REGISTER_0048 <= OPR_MUL_3_INPUT_2_REGISTER_0048; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_3_INPUT_2_REGISTER_0048 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_3_INPUT_2_REGISTER_0048;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0024
   --
   PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0024 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E1   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT; -- mode (1) :: Affectation d'une valeur (temp1)
        WHEN E2   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- mode (1) :: Maintient d'une valeur (temp1)
        WHEN E3   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E4   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E5   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E6   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E7   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN E8   => OPR_MUL_4_INPUT_2_REGISTER_0024 <= OPR_MUL_4_INPUT_2_REGISTER_0024; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_4_INPUT_2_REGISTER_0024 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0024;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0042
   --
   PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0042 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN E1   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT; -- mode (1) :: Affectation d'une valeur (temp46)
        WHEN E2   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E3   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E4   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN E5   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN E6   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN E7   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN E8   => OPR_MUL_4_INPUT_2_REGISTER_0042 <= OPR_MUL_4_INPUT_2_REGISTER_0042; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_4_INPUT_2_REGISTER_0042 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0042;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0051
   --
   PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0051 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- datapath activity freeze
        WHEN E1   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT; -- mode (1) :: Affectation d'une valeur (temp5)
        WHEN E2   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E3   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E4   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E5   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- datapath activity freeze
        WHEN E6   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- datapath activity freeze
        WHEN E7   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- datapath activity freeze
        WHEN E8   => OPR_MUL_4_INPUT_2_REGISTER_0051 <= OPR_MUL_4_INPUT_2_REGISTER_0051; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_4_INPUT_2_REGISTER_0051 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_4_INPUT_2_REGISTER_0051;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0026
   --
   PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0026 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E1   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT; -- mode (1) :: Affectation d'une valeur (temp0)
        WHEN E2   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E3   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E4   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E5   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E6   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E7   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN E8   => OPR_MUL_5_INPUT_2_REGISTER_0026 <= OPR_MUL_5_INPUT_2_REGISTER_0026; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_5_INPUT_2_REGISTER_0026 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0026;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0035
   --
   PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0035 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E1   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT; -- mode (1) :: Affectation d'une valeur (temp41)
        WHEN E2   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- mode (1) :: Maintient d'une valeur (temp41)
        WHEN E3   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E4   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E5   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E6   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E7   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN E8   => OPR_MUL_5_INPUT_2_REGISTER_0035 <= OPR_MUL_5_INPUT_2_REGISTER_0035; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_5_INPUT_2_REGISTER_0035 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0035;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0039
   --
   PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0039 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- datapath activity freeze
        WHEN E1   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT; -- mode (1) :: Affectation d'une valeur (temp3)
        WHEN E2   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E3   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- mode (1) :: Maintient d'une valeur (temp3)
        WHEN E4   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT; -- mode (1) :: Affectation d'une valeur (temp6)
        WHEN E5   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- mode (1) :: Maintient d'une valeur (temp6)
        WHEN E6   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- datapath activity freeze
        WHEN E7   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- datapath activity freeze
        WHEN E8   => OPR_MUL_5_INPUT_2_REGISTER_0039 <= OPR_MUL_5_INPUT_2_REGISTER_0039; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_5_INPUT_2_REGISTER_0039 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0039;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0049
   --
   PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0049 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- datapath activity freeze
        WHEN E1   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT; -- mode (1) :: Affectation d'une valeur (temp49)
        WHEN E2   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E3   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E4   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E5   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- datapath activity freeze
        WHEN E6   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- datapath activity freeze
        WHEN E7   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- datapath activity freeze
        WHEN E8   => OPR_MUL_5_INPUT_2_REGISTER_0049 <= OPR_MUL_5_INPUT_2_REGISTER_0049; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_5_INPUT_2_REGISTER_0049 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_5_INPUT_2_REGISTER_0049;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0028
   --
   PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0028 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E1   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT; -- mode (1) :: Affectation d'une valeur (temp1)
        WHEN E2   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E3   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E4   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E5   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E6   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E7   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN E8   => OPR_MUL_6_INPUT_2_REGISTER_0028 <= OPR_MUL_6_INPUT_2_REGISTER_0028; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_6_INPUT_2_REGISTER_0028 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0028;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0037
   --
   PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0037 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E1   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT; -- mode (1) :: Affectation d'une valeur (temp43)
        WHEN E2   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- mode (1) :: Maintient d'une valeur (temp43)
        WHEN E3   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E4   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E5   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E6   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E7   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN E8   => OPR_MUL_6_INPUT_2_REGISTER_0037 <= OPR_MUL_6_INPUT_2_REGISTER_0037; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_6_INPUT_2_REGISTER_0037 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0037;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0046
   --
   PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0046 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN E1   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT; -- mode (1) :: Affectation d'une valeur (temp46)
        WHEN E2   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E3   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E4   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN E5   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN E6   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN E7   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN E8   => OPR_MUL_6_INPUT_2_REGISTER_0046 <= OPR_MUL_6_INPUT_2_REGISTER_0046; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_6_INPUT_2_REGISTER_0046 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0046;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0052
   --
   PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0052 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- datapath activity freeze
        WHEN E1   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT; -- mode (1) :: Affectation d'une valeur (temp5)
        WHEN E2   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E3   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E4   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- mode (1) :: Maintient d'une valeur (temp5)
        WHEN E5   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- datapath activity freeze
        WHEN E6   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- datapath activity freeze
        WHEN E7   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- datapath activity freeze
        WHEN E8   => OPR_MUL_6_INPUT_2_REGISTER_0052 <= OPR_MUL_6_INPUT_2_REGISTER_0052; -- datapath activity freeze
        WHEN OTHERS => OPR_MUL_6_INPUT_2_REGISTER_0052 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_MUL_6_INPUT_2_REGISTER_0052;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_1_INPUT_1_REGISTER_0009
   --
   PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_1_REGISTER_0009 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT; -- mode (1) :: Affectation d'une valeur (X(1))
        WHEN E1   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009; -- datapath activity freeze
        WHEN E2   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT; -- mode (1) :: Affectation d'une valeur (temp20)
        WHEN E3   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT; -- mode (1) :: Affectation d'une valeur (temp31)
        WHEN E4   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009; -- datapath activity freeze
        WHEN E5   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT; -- mode (1) :: Affectation d'une valeur (temp15)
        WHEN E6   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009; -- datapath activity freeze
        WHEN E7   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009; -- datapath activity freeze
        WHEN E8   => OPR_SUB_1_INPUT_1_REGISTER_0009 <= OPR_SUB_1_INPUT_1_REGISTER_0009; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_1_INPUT_1_REGISTER_0009 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_1_REGISTER_0009;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_1_INPUT_1_REGISTER_0054
   --
   PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_1_REGISTER_0054 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E1   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E2   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E3   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT; -- mode (1) :: Affectation d'une valeur (temp23)
        WHEN E4   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- mode (1) :: Maintient d'une valeur (temp23)
        WHEN E5   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E6   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E7   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN E8   => OPR_SUB_1_INPUT_1_REGISTER_0054 <= OPR_SUB_1_INPUT_1_REGISTER_0054; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_1_INPUT_1_REGISTER_0054 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_1_REGISTER_0054;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_1_INPUT_2_REGISTER_0010
   --
   PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_2_REGISTER_0010 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT; -- mode (1) :: Affectation d'une valeur (X(8))
        WHEN E1   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010; -- datapath activity freeze
        WHEN E2   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT; -- mode (1) :: Affectation d'une valeur (temp22)
        WHEN E3   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT; -- mode (1) :: Affectation d'une valeur (temp33)
        WHEN E4   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT; -- mode (1) :: Affectation d'une valeur (temp25)
        WHEN E5   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT; -- mode (1) :: Affectation d'une valeur (temp17)
        WHEN E6   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010; -- datapath activity freeze
        WHEN E7   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010; -- datapath activity freeze
        WHEN E8   => OPR_SUB_1_INPUT_2_REGISTER_0010 <= OPR_SUB_1_INPUT_2_REGISTER_0010; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_1_INPUT_2_REGISTER_0010 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_1_INPUT_2_REGISTER_0010;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_2_INPUT_1_REGISTER_0011
   --
   PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_1_REGISTER_0011 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT; -- mode (1) :: Affectation d'une valeur (X(2))
        WHEN E1   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011; -- datapath activity freeze
        WHEN E2   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT; -- mode (1) :: Affectation d'une valeur (temp64)
        WHEN E3   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT; -- mode (1) :: Affectation d'une valeur (temp75)
        WHEN E4   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT; -- mode (1) :: Affectation d'une valeur (temp56)
        WHEN E5   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT; -- mode (1) :: Affectation d'une valeur (temp81)
        WHEN E6   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011; -- datapath activity freeze
        WHEN E7   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011; -- datapath activity freeze
        WHEN E8   => OPR_SUB_2_INPUT_1_REGISTER_0011 <= OPR_SUB_2_INPUT_1_REGISTER_0011; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_2_INPUT_1_REGISTER_0011 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_1_REGISTER_0011;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0012
   --
   PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0012 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT; -- mode (1) :: Affectation d'une valeur (X(7))
        WHEN E1   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT; -- mode (1) :: Affectation d'une valeur (temp43)
        WHEN E2   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- mode (1) :: Maintient d'une valeur (temp43)
        WHEN E3   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT; -- mode (1) :: Affectation d'une valeur (temp77)
        WHEN E4   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- datapath activity freeze
        WHEN E5   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- datapath activity freeze
        WHEN E6   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- datapath activity freeze
        WHEN E7   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- datapath activity freeze
        WHEN E8   => OPR_SUB_2_INPUT_2_REGISTER_0012 <= OPR_SUB_2_INPUT_2_REGISTER_0012; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_2_INPUT_2_REGISTER_0012 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0012;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0055
   --
   PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0055 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- datapath activity freeze
        WHEN E1   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT; -- mode (1) :: Affectation d'une valeur (temp46)
        WHEN E2   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E3   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E4   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- mode (1) :: Maintient d'une valeur (temp46)
        WHEN E5   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- datapath activity freeze
        WHEN E6   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- datapath activity freeze
        WHEN E7   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- datapath activity freeze
        WHEN E8   => OPR_SUB_2_INPUT_2_REGISTER_0055 <= OPR_SUB_2_INPUT_2_REGISTER_0055; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_2_INPUT_2_REGISTER_0055 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0055;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0056
   --
   PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0056 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- datapath activity freeze
        WHEN E1   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT; -- mode (1) :: Affectation d'une valeur (temp49)
        WHEN E2   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E3   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E4   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E5   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- mode (1) :: Maintient d'une valeur (temp49)
        WHEN E6   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- datapath activity freeze
        WHEN E7   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- datapath activity freeze
        WHEN E8   => OPR_SUB_2_INPUT_2_REGISTER_0056 <= OPR_SUB_2_INPUT_2_REGISTER_0056; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_2_INPUT_2_REGISTER_0056 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_2_INPUT_2_REGISTER_0056;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_3_INPUT_1_REGISTER_0013
   --
   PROC_REGISTER_CONTROL_OPR_SUB_3_INPUT_1_REGISTER_0013 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT; -- mode (1) :: Affectation d'une valeur (X(3))
        WHEN E1   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN E2   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN E3   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT; -- mode (1) :: Affectation d'une valeur (temp53)
        WHEN E4   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN E5   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT; -- mode (1) :: Affectation d'une valeur (temp59)
        WHEN E6   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN E7   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN E8   => OPR_SUB_3_INPUT_1_REGISTER_0013 <= OPR_SUB_3_INPUT_1_REGISTER_0013; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_3_INPUT_1_REGISTER_0013 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_3_INPUT_1_REGISTER_0013;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_3_INPUT_2_REGISTER_0014
   --
   PROC_REGISTER_CONTROL_OPR_SUB_3_INPUT_2_REGISTER_0014 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT; -- mode (1) :: Affectation d'une valeur (X(6))
        WHEN E1   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN E2   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN E3   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT; -- mode (1) :: Affectation d'une valeur (temp55)
        WHEN E4   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN E5   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT; -- mode (1) :: Affectation d'une valeur (temp61)
        WHEN E6   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN E7   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN E8   => OPR_SUB_3_INPUT_2_REGISTER_0014 <= OPR_SUB_3_INPUT_2_REGISTER_0014; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_3_INPUT_2_REGISTER_0014 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_3_INPUT_2_REGISTER_0014;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_4_INPUT_1_REGISTER_0015
   --
   PROC_REGISTER_CONTROL_OPR_SUB_4_INPUT_1_REGISTER_0015 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT; -- mode (1) :: Affectation d'une valeur (X(4))
        WHEN E1   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- datapath activity freeze
        WHEN E2   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- datapath activity freeze
        WHEN E3   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT; -- mode (1) :: Affectation d'une valeur (temp12)
        WHEN E4   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- mode (1) :: Maintient d'une valeur (temp12)
        WHEN E5   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT; -- mode (1) :: Affectation d'une valeur (temp37)
        WHEN E6   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- datapath activity freeze
        WHEN E7   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- datapath activity freeze
        WHEN E8   => OPR_SUB_4_INPUT_1_REGISTER_0015 <= OPR_SUB_4_INPUT_1_REGISTER_0015; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_4_INPUT_1_REGISTER_0015 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_4_INPUT_1_REGISTER_0015;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OPR_SUB_4_INPUT_2_REGISTER_0016
   --
   PROC_REGISTER_CONTROL_OPR_SUB_4_INPUT_2_REGISTER_0016 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT; -- mode (1) :: Affectation d'une valeur (X(5))
        WHEN E1   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN E2   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN E3   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN E4   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT; -- mode (1) :: Affectation d'une valeur (temp14)
        WHEN E5   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT; -- mode (1) :: Affectation d'une valeur (temp39)
        WHEN E6   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN E7   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN E8   => OPR_SUB_4_INPUT_2_REGISTER_0016 <= OPR_SUB_4_INPUT_2_REGISTER_0016; -- datapath activity freeze
        WHEN OTHERS => OPR_SUB_4_INPUT_2_REGISTER_0016 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OPR_SUB_4_INPUT_2_REGISTER_0016;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_1_REGISTER_0057
   --
   PROC_REGISTER_CONTROL_OUTPUT_1_REGISTER_0057 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E1   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E2   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E3   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E4   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E5   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN E6   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057_INPUT; -- mode (1) :: Affectation d'une valeur (Y(1))
        WHEN E7   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- mode (1) :: Maintient d'une valeur (Y(1))
        WHEN E8   => OUTPUT_1_REGISTER_0057 <= OUTPUT_1_REGISTER_0057; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_1_REGISTER_0057 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_1_REGISTER_0057;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_2_REGISTER_0061
   --
   PROC_REGISTER_CONTROL_OUTPUT_2_REGISTER_0061 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E1   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E2   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E3   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E4   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E5   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN E6   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061_INPUT; -- mode (1) :: Affectation d'une valeur (Y(2))
        WHEN E7   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- mode (1) :: Maintient d'une valeur (Y(2))
        WHEN E8   => OUTPUT_2_REGISTER_0061 <= OUTPUT_2_REGISTER_0061; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_2_REGISTER_0061 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_2_REGISTER_0061;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_3_REGISTER_0058
   --
   PROC_REGISTER_CONTROL_OUTPUT_3_REGISTER_0058 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E1   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E2   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E3   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E4   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E5   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN E6   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058_INPUT; -- mode (1) :: Affectation d'une valeur (Y(3))
        WHEN E7   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- mode (1) :: Maintient d'une valeur (Y(3))
        WHEN E8   => OUTPUT_3_REGISTER_0058 <= OUTPUT_3_REGISTER_0058; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_3_REGISTER_0058 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_3_REGISTER_0058;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_4_REGISTER_0062
   --
   PROC_REGISTER_CONTROL_OUTPUT_4_REGISTER_0062 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E1   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E2   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E3   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E4   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E5   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN E6   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062_INPUT; -- mode (1) :: Affectation d'une valeur (Y(4))
        WHEN E7   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- mode (1) :: Maintient d'une valeur (Y(4))
        WHEN E8   => OUTPUT_4_REGISTER_0062 <= OUTPUT_4_REGISTER_0062; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_4_REGISTER_0062 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_4_REGISTER_0062;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_5_REGISTER_0059
   --
   PROC_REGISTER_CONTROL_OUTPUT_5_REGISTER_0059 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E1   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E2   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E3   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E4   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E5   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN E6   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059_INPUT; -- mode (1) :: Affectation d'une valeur (Y(5))
        WHEN E7   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- mode (1) :: Maintient d'une valeur (Y(5))
        WHEN E8   => OUTPUT_5_REGISTER_0059 <= OUTPUT_5_REGISTER_0059; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_5_REGISTER_0059 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_5_REGISTER_0059;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_6_REGISTER_0063
   --
   PROC_REGISTER_CONTROL_OUTPUT_6_REGISTER_0063 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E1   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E2   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E3   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E4   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E5   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN E6   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063_INPUT; -- mode (1) :: Affectation d'une valeur (Y(6))
        WHEN E7   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- mode (1) :: Maintient d'une valeur (Y(6))
        WHEN E8   => OUTPUT_6_REGISTER_0063 <= OUTPUT_6_REGISTER_0063; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_6_REGISTER_0063 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_6_REGISTER_0063;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_7_REGISTER_0060
   --
   PROC_REGISTER_CONTROL_OUTPUT_7_REGISTER_0060 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E1   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E2   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E3   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E4   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E5   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN E6   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060_INPUT; -- mode (1) :: Affectation d'une valeur (Y(7))
        WHEN E7   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- mode (1) :: Maintient d'une valeur (Y(7))
        WHEN E8   => OUTPUT_7_REGISTER_0060 <= OUTPUT_7_REGISTER_0060; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_7_REGISTER_0060 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_7_REGISTER_0060;


   --
   --  PROCESS DEFINED FOR DRIVING COMMAND SIGNALS TO OUTPUT_8_REGISTER_0064
   --
   PROC_REGISTER_CONTROL_OUTPUT_8_REGISTER_0064 : PROCESS (clock)
   BEGIN
      IF ( clock'event AND clock = '1' ) THEN
        CASE CurrentState_GLOBAL IS
        WHEN E0   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E1   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E2   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E3   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E4   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E5   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN E6   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064_INPUT; -- mode (1) :: Affectation d'une valeur (Y(8))
        WHEN E7   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- mode (1) :: Maintient d'une valeur (Y(8))
        WHEN E8   => OUTPUT_8_REGISTER_0064 <= OUTPUT_8_REGISTER_0064; -- datapath activity freeze
        WHEN OTHERS => OUTPUT_8_REGISTER_0064 <= (OTHERS=>'X');
       END CASE; 
     END IF; -- IF(clock...)
   END PROCESS PROC_REGISTER_CONTROL_OUTPUT_8_REGISTER_0064;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_1
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_1 : PROCESS (OUTPUT_1_REGISTER_0057)
   BEGIN
      OUTPUT_1 <= OUTPUT_1_REGISTER_0057;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_1;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_2
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_2 : PROCESS (OUTPUT_2_REGISTER_0061)
   BEGIN
      OUTPUT_2 <= OUTPUT_2_REGISTER_0061;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_2;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_3
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_3 : PROCESS (OUTPUT_3_REGISTER_0058)
   BEGIN
      OUTPUT_3 <= OUTPUT_3_REGISTER_0058;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_3;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_4
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_4 : PROCESS (OUTPUT_4_REGISTER_0062)
   BEGIN
      OUTPUT_4 <= OUTPUT_4_REGISTER_0062;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_4;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_5
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_5 : PROCESS (OUTPUT_5_REGISTER_0059)
   BEGIN
      OUTPUT_5 <= OUTPUT_5_REGISTER_0059;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_5;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_6
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_6 : PROCESS (OUTPUT_6_REGISTER_0063)
   BEGIN
      OUTPUT_6 <= OUTPUT_6_REGISTER_0063;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_6;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_7
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_7 : PROCESS (OUTPUT_7_REGISTER_0060)
   BEGIN
      OUTPUT_7 <= OUTPUT_7_REGISTER_0060;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_7;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_8
   --
   PROC_OUTPUT_MULTIPLEXER_OUTPUT_8 : PROCESS (OUTPUT_8_REGISTER_0064)
   BEGIN
      OUTPUT_8 <= OUTPUT_8_REGISTER_0064;
   END PROCESS PROC_OUTPUT_MULTIPLEXER_OUTPUT_8;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_1, OPR_ADD_1_OUTPUT_1, OPR_MUL_3_OUTPUT_1, OPR_SUB_2_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT <= INPUT_1;
        WHEN E1 => OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT <= OPR_ADD_1_OUTPUT_1;
        WHEN E2 => OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT <= OPR_MUL_3_OUTPUT_1;
        WHEN E4 => OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT <= OPR_SUB_2_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_1_INPUT_1_REGISTER_0001_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_8, OPR_ADD_2_OUTPUT_1, OPR_MUL_4_OUTPUT_1, OPR_MUL_6_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT <= INPUT_8;
        WHEN E1 => OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT <= OPR_ADD_2_OUTPUT_1;
        WHEN E2 => OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT <= OPR_MUL_4_OUTPUT_1;
        WHEN E4 => OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT <= OPR_MUL_6_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_1_INPUT_2_REGISTER_0002_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_2, OPR_ADD_1_OUTPUT_1, OPR_ADD_3_OUTPUT_1, OPR_SUB_1_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT <= INPUT_2;
        WHEN E2 => OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT <= OPR_ADD_1_OUTPUT_1;
        WHEN E3 => OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT <= OPR_ADD_3_OUTPUT_1;
        WHEN E5 => OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT <= OPR_SUB_1_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_2_INPUT_1_REGISTER_0003_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_7, OPR_ADD_3_OUTPUT_1, OPR_MUL_2_OUTPUT_1, OPR_MUL_6_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT <= INPUT_7;
        WHEN E1 => OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT <= OPR_ADD_3_OUTPUT_1;
        WHEN E4 => OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT <= OPR_MUL_2_OUTPUT_1;
        WHEN E5 => OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT <= OPR_MUL_6_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_2_INPUT_2_REGISTER_0004_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_3, OPR_ADD_4_OUTPUT_1, OPR_SUB_1_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT <= INPUT_3;
        WHEN E1 => OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT <= OPR_SUB_1_OUTPUT_1;
        WHEN E4 => OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT <= OPR_SUB_1_OUTPUT_1;
        WHEN E5 => OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT <= OPR_ADD_4_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_3_INPUT_1_REGISTER_0005_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_6, OPR_MUL_1_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT <= INPUT_6;
        WHEN E2 => OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT <= OPR_MUL_1_OUTPUT_1;
        WHEN E4 => OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT <= OPR_MUL_1_OUTPUT_1;
        WHEN E5 => OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT <= OPR_MUL_1_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_3_INPUT_2_REGISTER_0006_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_4, OPR_ADD_2_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT <= INPUT_4;
        WHEN E3 => OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT <= OPR_ADD_2_OUTPUT_1;
        WHEN E5 => OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT <= OPR_ADD_2_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_4_INPUT_1_REGISTER_0007_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT : PROCESS (OPR_SUB_2_OUTPUT_1)
   BEGIN
     OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT <= OPR_SUB_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_4_INPUT_1_REGISTER_0047_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT
   --
   PROC_MULTIPLEXER_OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_5, OPR_ADD_4_OUTPUT_1, OPR_MUL_4_OUTPUT_1, OPR_MUL_5_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT <= INPUT_5;
        WHEN E1 => OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT <= OPR_ADD_4_OUTPUT_1;
        WHEN E4 => OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT <= OPR_MUL_4_OUTPUT_1;
        WHEN E5 => OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT <= OPR_MUL_5_OUTPUT_1;
        WHEN OTHERS => OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_ADD_4_INPUT_2_REGISTER_0008_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT : PROCESS (OPR_SUB_2_OUTPUT_1)
   BEGIN
     OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT <= OPR_SUB_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0018_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT : PROCESS (OPR_SUB_1_OUTPUT_1)
   BEGIN
     OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT <= OPR_SUB_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0031_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT : PROCESS (OPR_ADD_3_OUTPUT_1)
   BEGIN
     OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT <= OPR_ADD_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0044_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT : PROCESS (OPR_SUB_4_OUTPUT_1)
   BEGIN
     OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT <= OPR_SUB_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_1_INPUT_2_REGISTER_0050_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT : PROCESS (OPR_SUB_1_OUTPUT_1)
   BEGIN
     OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT <= OPR_SUB_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0020_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT : PROCESS (OPR_SUB_2_OUTPUT_1)
   BEGIN
     OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT <= OPR_SUB_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0033_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT : PROCESS (OPR_SUB_3_OUTPUT_1)
   BEGIN
     OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT <= OPR_SUB_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0040_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT : PROCESS (OPR_SUB_4_OUTPUT_1)
   BEGIN
     OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT <= OPR_SUB_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_2_INPUT_2_REGISTER_0053_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT : PROCESS (OPR_ADD_1_OUTPUT_1)
   BEGIN
     OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT <= OPR_ADD_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0022_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT : PROCESS (OPR_ADD_3_OUTPUT_1)
   BEGIN
     OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT <= OPR_ADD_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0038_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT : PROCESS (OPR_ADD_4_OUTPUT_1)
   BEGIN
     OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT <= OPR_ADD_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_3_INPUT_2_REGISTER_0048_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT : PROCESS (OPR_ADD_2_OUTPUT_1)
   BEGIN
     OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT <= OPR_ADD_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0024_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT : PROCESS (OPR_SUB_3_OUTPUT_1)
   BEGIN
     OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT <= OPR_SUB_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0042_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT : PROCESS (OPR_ADD_4_OUTPUT_1)
   BEGIN
     OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT <= OPR_ADD_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_4_INPUT_2_REGISTER_0051_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT : PROCESS (OPR_ADD_1_OUTPUT_1)
   BEGIN
     OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT <= OPR_ADD_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0026_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT : PROCESS (OPR_SUB_1_OUTPUT_1)
   BEGIN
     OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT <= OPR_SUB_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0035_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT : PROCESS (CurrentState_GLOBAL, OPR_ADD_3_OUTPUT_1, OPR_ADD_4_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E1 => OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT <= OPR_ADD_3_OUTPUT_1;
        WHEN E4 => OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT <= OPR_ADD_4_OUTPUT_1;
        WHEN OTHERS => OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0039_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT : PROCESS (OPR_SUB_4_OUTPUT_1)
   BEGIN
     OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT <= OPR_SUB_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_5_INPUT_2_REGISTER_0049_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT : PROCESS (OPR_ADD_2_OUTPUT_1)
   BEGIN
     OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT <= OPR_ADD_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0028_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT : PROCESS (OPR_SUB_2_OUTPUT_1)
   BEGIN
     OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT <= OPR_SUB_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0037_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT : PROCESS (OPR_SUB_3_OUTPUT_1)
   BEGIN
     OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT <= OPR_SUB_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0046_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT
   --
   PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT : PROCESS (OPR_ADD_4_OUTPUT_1)
   BEGIN
     OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT <= OPR_ADD_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_MUL_6_INPUT_2_REGISTER_0052_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_1, OPR_MUL_3_OUTPUT_1, OPR_MUL_5_OUTPUT_1, OPR_SUB_4_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT <= INPUT_1;
        WHEN E2 => OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT <= OPR_MUL_5_OUTPUT_1;
        WHEN E3 => OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT <= OPR_MUL_3_OUTPUT_1;
        WHEN E5 => OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT <= OPR_SUB_4_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_1_INPUT_1_REGISTER_0009_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT : PROCESS (OPR_SUB_1_OUTPUT_1)
   BEGIN
     OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT <= OPR_SUB_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_1_INPUT_1_REGISTER_0054_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_8, OPR_MUL_4_OUTPUT_1, OPR_MUL_5_OUTPUT_1, OPR_MUL_6_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= INPUT_8;
        WHEN E2 => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= OPR_MUL_6_OUTPUT_1;
        WHEN E3 => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= OPR_MUL_4_OUTPUT_1;
        WHEN E4 => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= OPR_MUL_5_OUTPUT_1;
        WHEN E5 => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= OPR_MUL_4_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_1_INPUT_2_REGISTER_0010_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_2, OPR_ADD_1_OUTPUT_1, OPR_MUL_2_OUTPUT_1, OPR_MUL_5_OUTPUT_1, OPR_SUB_3_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= INPUT_2;
        WHEN E2 => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= OPR_MUL_2_OUTPUT_1;
        WHEN E3 => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= OPR_MUL_5_OUTPUT_1;
        WHEN E4 => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= OPR_SUB_3_OUTPUT_1;
        WHEN E5 => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= OPR_ADD_1_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_2_INPUT_1_REGISTER_0011_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_7, OPR_MUL_6_OUTPUT_1, OPR_SUB_2_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT <= INPUT_7;
        WHEN E1 => OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT <= OPR_SUB_2_OUTPUT_1;
        WHEN E3 => OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT <= OPR_MUL_6_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0012_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT : PROCESS (OPR_SUB_3_OUTPUT_1)
   BEGIN
     OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT <= OPR_SUB_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0055_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT : PROCESS (OPR_SUB_4_OUTPUT_1)
   BEGIN
     OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT <= OPR_SUB_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_2_INPUT_2_REGISTER_0056_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_3, OPR_MUL_1_OUTPUT_1, OPR_SUB_2_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT <= INPUT_3;
        WHEN E3 => OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT <= OPR_MUL_1_OUTPUT_1;
        WHEN E5 => OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT <= OPR_SUB_2_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_3_INPUT_1_REGISTER_0013_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_6, OPR_MUL_2_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT <= INPUT_6;
        WHEN E3 => OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT <= OPR_MUL_2_OUTPUT_1;
        WHEN E5 => OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT <= OPR_MUL_2_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_3_INPUT_2_REGISTER_0014_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_4, OPR_ADD_1_OUTPUT_1, OPR_ADD_3_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT <= INPUT_4;
        WHEN E3 => OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT <= OPR_ADD_1_OUTPUT_1;
        WHEN E5 => OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT <= OPR_ADD_3_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_4_INPUT_1_REGISTER_0015_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT
   --
   PROC_MULTIPLEXER_OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT : PROCESS (CurrentState_GLOBAL, INPUT_5, OPR_MUL_3_OUTPUT_1)
   BEGIN
      CASE CurrentState_GLOBAL IS
        WHEN E0 => OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT <= INPUT_5;
        WHEN E4 => OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT <= OPR_MUL_3_OUTPUT_1;
        WHEN E5 => OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT <= OPR_MUL_3_OUTPUT_1;
        WHEN OTHERS => OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT <= (OTHERS=>'X');
      END CASE; 
   END PROCESS PROC_MULTIPLEXER_OPR_SUB_4_INPUT_2_REGISTER_0016_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_1_REGISTER_0057_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_1_REGISTER_0057_INPUT : PROCESS (OPR_MUL_5_OUTPUT_1)
   BEGIN
     OUTPUT_1_REGISTER_0057_INPUT <= OPR_MUL_5_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_1_REGISTER_0057_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_2_REGISTER_0061_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_2_REGISTER_0061_INPUT : PROCESS (OPR_ADD_4_OUTPUT_1)
   BEGIN
     OUTPUT_2_REGISTER_0061_INPUT <= OPR_ADD_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_2_REGISTER_0061_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_3_REGISTER_0058_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_3_REGISTER_0058_INPUT : PROCESS (OPR_SUB_1_OUTPUT_1)
   BEGIN
     OUTPUT_3_REGISTER_0058_INPUT <= OPR_SUB_1_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_3_REGISTER_0058_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_4_REGISTER_0062_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_4_REGISTER_0062_INPUT : PROCESS (OPR_SUB_3_OUTPUT_1)
   BEGIN
     OUTPUT_4_REGISTER_0062_INPUT <= OPR_SUB_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_4_REGISTER_0062_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_5_REGISTER_0059_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_5_REGISTER_0059_INPUT : PROCESS (OPR_ADD_2_OUTPUT_1)
   BEGIN
     OUTPUT_5_REGISTER_0059_INPUT <= OPR_ADD_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_5_REGISTER_0059_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_6_REGISTER_0063_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_6_REGISTER_0063_INPUT : PROCESS (OPR_ADD_3_OUTPUT_1)
   BEGIN
     OUTPUT_6_REGISTER_0063_INPUT <= OPR_ADD_3_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_6_REGISTER_0063_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_7_REGISTER_0060_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_7_REGISTER_0060_INPUT : PROCESS (OPR_SUB_4_OUTPUT_1)
   BEGIN
     OUTPUT_7_REGISTER_0060_INPUT <= OPR_SUB_4_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_7_REGISTER_0060_INPUT;


   --
   --  PROCESS DEFINED FOR DRIVING SIGNALS TO OUTPUT_8_REGISTER_0064_INPUT
   --
   PROC_MULTIPLEXER_OUTPUT_8_REGISTER_0064_INPUT : PROCESS (OPR_SUB_2_OUTPUT_1)
   BEGIN
     OUTPUT_8_REGISTER_0064_INPUT <= OPR_SUB_2_OUTPUT_1;
   END PROCESS PROC_MULTIPLEXER_OUTPUT_8_REGISTER_0064_INPUT;


   ---------------------------------------------------------  
   PROC_CONTROLER_FSM : PROCESS (clock)
   BEGIN
    IF ( clock'event and clock = '1' ) THEN
     IF( reset = '1' ) THEN
       CurrentState_GLOBAL <= E0;
     ELSE
      CASE CurrentState_GLOBAL IS
        WHEN E0   =>
          IF( start = '1' ) THEN
            CurrentState_GLOBAL <= E1  ;
          ELSE
            CurrentState_GLOBAL <= E0;
          END IF;
        WHEN E1   => CurrentState_GLOBAL <= E2  ;
        WHEN E2   => CurrentState_GLOBAL <= E3  ;
        WHEN E3   => CurrentState_GLOBAL <= E4  ;
        WHEN E4   => CurrentState_GLOBAL <= E5  ;
        WHEN E5   => CurrentState_GLOBAL <= E6  ;
        WHEN E6   => CurrentState_GLOBAL <= E7  ;
        WHEN E7   => CurrentState_GLOBAL <= E8  ;
        WHEN E8   => CurrentState_GLOBAL <= E0  ;
        WHEN OTHERS => 
            CurrentState_GLOBAL <= E0;
      END CASE; 
     END IF; -- IF(reset...)
    END IF; -- IF(clock...)
   END PROCESS PROC_CONTROLER_FSM;
   ---------------------------------------------------------  



OPR_ADD_1 : ADD_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_ADD_1_INPUT_1),
    STD_LOGIC_VECTOR(OPR_ADD_1_INPUT_2),
    OPR_ADD_1_OUTPUT_1
   );
 
OPR_ADD_2 : ADD_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_ADD_2_INPUT_1),
    STD_LOGIC_VECTOR(OPR_ADD_2_INPUT_2),
    OPR_ADD_2_OUTPUT_1
   );
 
OPR_ADD_3 : ADD_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_ADD_3_INPUT_1),
    STD_LOGIC_VECTOR(OPR_ADD_3_INPUT_2),
    OPR_ADD_3_OUTPUT_1
   );
 
OPR_ADD_4 : ADD_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_ADD_4_INPUT_1),
    STD_LOGIC_VECTOR(OPR_ADD_4_INPUT_2),
    OPR_ADD_4_OUTPUT_1
   );
 
OPR_MUL_1 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_1_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_1_INPUT_2),
    OPR_MUL_1_OUTPUT_1
   );
 
OPR_MUL_2 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_2_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_2_INPUT_2),
    OPR_MUL_2_OUTPUT_1
   );
 
OPR_MUL_3 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_3_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_3_INPUT_2),
    OPR_MUL_3_OUTPUT_1
   );
 
OPR_MUL_4 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_4_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_4_INPUT_2),
    OPR_MUL_4_OUTPUT_1
   );
 
OPR_MUL_5 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_5_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_5_INPUT_2),
    OPR_MUL_5_OUTPUT_1
   );
 
OPR_MUL_6 : MUL_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_MUL_6_INPUT_1),
    STD_LOGIC_VECTOR(OPR_MUL_6_INPUT_2),
    OPR_MUL_6_OUTPUT_1
   );
 
OPR_SUB_1 : SUB_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_SUB_1_INPUT_1),
    STD_LOGIC_VECTOR(OPR_SUB_1_INPUT_2),
    OPR_SUB_1_OUTPUT_1
   );
 
OPR_SUB_2 : SUB_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_SUB_2_INPUT_1),
    STD_LOGIC_VECTOR(OPR_SUB_2_INPUT_2),
    OPR_SUB_2_OUTPUT_1
   );
 
OPR_SUB_3 : SUB_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_SUB_3_INPUT_1),
    STD_LOGIC_VECTOR(OPR_SUB_3_INPUT_2),
    OPR_SUB_3_OUTPUT_1
   );
 
OPR_SUB_4 : SUB_DYNAMIC
  GENERIC MAP(
      C_SIGNED         => 1,
      INPUT_1_WIDTH    => 32,
      INPUT_2_WIDTH    => 32,
      OUTPUT_1_WIDTH   => 32
  )
  PORT MAP(
    STD_LOGIC_VECTOR(OPR_SUB_4_INPUT_1),
    STD_LOGIC_VECTOR(OPR_SUB_4_INPUT_2),
    OPR_SUB_4_OUTPUT_1
   );
 

END design_normal_arch;